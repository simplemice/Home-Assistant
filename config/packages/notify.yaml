###############################################################################
#   @author         :   Simplemice
#   @date           :   27/01/2024
#   @package        :   Notify
#   @description    :   A Collection of Notification Scripts and Configs.
###############################################################################
media_extractor:

input_datetime:
  morning_report:
    name: Morning Report
    has_date: false
    has_time: true
  nightly_report:
    name: Nightly Report
    has_date: false
    has_time: true
  daily_report:
    name: Daily Report
    has_date: false
    has_time: true
  audible_notification_on:
    name: Audible Notifications On
    has_date: false
    has_time: true
  audible_notification_off:
    name: Audible Notifications Off
    has_date: false
    has_time: true
  text_notification_on:
    name: Text Notifications On
    has_date: false
    has_time: true
  text_notification_off:
    name: Text Notifications Off
    has_date: false
    has_time: true
  telegram_notification_on:
    name: Telegram Notifications On
    has_date: false
    has_time: true
  telegram_notification_off:
    name: Telegram Notifications Off
    has_date: false
    has_time: true
  visual_notification_on:
    name: Visual Notifications On
    has_date: false
    has_time: true
  visual_notification_off:
    name: Visual Notifications Off
    has_date: false
    has_time: true
  last_time_alexa_called:
    name: Last Time Alexa Called
    has_date: true
    has_time: true

input_select:
  notify_voice:
    name: Jarvis Voice
    options:
      - None
      - Brian
      - Anna
      - Thomas
      - None
    initial: None
    icon: mdi:amazon-alexa

input_number:
  notify_volume:
    name: Alexa Notify Volume
    initial: 0.5
    min: 0
    max: 1
    step: 0.1

input_boolean:
  audible_notifications:
    name: "Audible Notification"
    icon: mdi:message-bulleted
  telegram_notifications:
    name: "Telegram Notification"
    icon: fab:telegram
  text_notifications:
    name: "Text Notification"
    icon: mdi:clipboard-text-play
  visual_notifications:
    name: "Visual Notification"
    icon: mdi:television-ambient-light

timer:
  audible_notify_timer:
    name: Audible Notification Timer
    duration: "00:30:00"
    icon: mdi:timer
    restore: true
  telegram_notify_timer:
    name: Telegram Notification Timer
    duration: "00:30:00"
    icon: mdi:timer
    restore: true
  text_notify_timer:
    name: Text Notification Timer
    duration: "00:30:00"
    icon: mdi:timer
    restore: true
  visual_notify_timer:
    name: Visual Notification Timer
    duration: "00:30:00"
    icon: mdi:timer
    restore: true

mqtt:
  sensor:
    - name: "Jarvis Last Msg"
      state_topic: "house/polly/lastmsg"
    - name: "Jarvis Last Location"
      state_topic: "house/polly/lastloc"

template:
  - binary_sensor:
      - name: Notify Mode
        state: >
          {% if is_state('input_boolean.audible_notifications', 'on') %}
            Audio Notify On
          {% elif is_state ('input_boolean.text_notifications', 'on') %}
            Text Notify On
          {% elif is_state ('input_boolean.telegram_notifications', 'on') %}
            Telegram Notify On
          {% else %}
            Mix Notify Mode On
          {% endif %}
        icon: >
          {% if is_state("binary_sensor.notify_modet", "on") %}
          mdi:bullhorn
          {% else %}
          mdi:bullhorn-outline
          {% endif %}
  - sensor:
      - name: alexa_audio
        state: >-
          {%- if is_state('sensor.last_alexa', 'media_player.bedroom_speaker') %}
            living_room
          {% else %}
            main
          {%- endif %}
      - name: last_alexa
        state: >
          {{ states.media_player | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}
#          {{ expand('group.all_echos') | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}
telegram_bot:
  - platform: polling
    api_key: !secret tg_api
    parse_mode: "html"
    allowed_chat_ids:
      - !secret tg_group
      - !secret tg_me

notify:
  - name: simplemice
    platform: group
    services:
      - service: mobile_app_micemob
      - service: mobile_app_micebook
  - name: telegram_group
    platform: telegram
    chat_id: !secret tg_group
  - name: telegram_mice
    platform: telegram
    chat_id: !secret tg_me

automation:
  - id: 81bee5ee-6820-4626-aebf-3deb8de69e4d
    alias: Turn On Audible Notifications
    initial_state: true
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.audible_notification_on', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.audible_notifications

  - id: e0e9c774-6abe-42aa-bdab-32108bebb0e9
    alias: Turn Off Audible Notifications
    initial_state: true
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.audible_notification_off', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: "on"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.audible_notifications

  - id: 1b90aaff-bf0a-4bae-8228-5119e42aacb7
    alias: Turn On Text Notifications
    initial_state: true
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.text_notification_on', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.text_notifications

  - id: e6d25a55-4b6a-408f-9178-e1ec5ca80378
    alias: Turn Off Text Notifications
    initial_state: true
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.text_notification_off', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: input_boolean.text_notifications
        state: "on"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.text_notifications

  - id: c3935663-68a2-4a7d-8acb-58934a8aa8b3
    alias: Turn On Telegram Notifications
    initial_state: true
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.telegram_notification_on', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.text_notifications

  - id: 7899c9ea-1820-4e36-924f-9589963e608a
    alias: Turn Off Telegram Notifications
    initial_state: true
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.telegram_notification_off', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: input_boolean.telegram_notifications
        state: "on"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.telegram_notifications

  - id: acd6e703-0dff-469a-8b42-d2cc21c6494a
    alias: Turn On Visual Notifications
    initial_state: true
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.visual_notification_on', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.visual_notifications

  - id: 1f537570-478d-4de7-8c59-cc304f06cb1c
    alias: Turn Off Visual Notifications
    initial_state: true
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.visual_notification_off', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: input_boolean.visual_notifications
        state: "on"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.visual_notifications

script:
  ###############################################################################
  # Txt Notify
  ###############################################################################
  text_debug:
    alias: Text Debug
    sequence:
      - condition: state
        entity_id: input_boolean.debug_texts
        state: "on"
      - service: notify.simplemice
        data_template:
          message: >
            {{ message }}

  notify_telegram:
    alias: Telegram Notification Service
    sequence:
      - condition: state
        entity_id: input_boolean.telegram_notifications
        state: "on"
      - service: notify.telegram_group
        data:
          message: "{{ message }}"
          title: "{{ title }}"
      - service: notify.telegram_mice
        data:
          message: "{{ message }}"
          title: "{{ title }}"

  text_notify:
    alias: Main Text Notification
    sequence:
      - condition: state
        entity_id: input_boolean.text_notifications
        state: "on"
      - choose:
          - conditions:
              - condition: template
                value_template: '{{ who == "simplemice"}}'
              - condition: state
                entity_id: input_boolean.text_notifications
                state: "on"
            sequence:
              - service: notify.simplemice
                data:
                  title: "{{ title }}"
                  message: "{{ message }}"
        default:
          - service: notify.telegram
            data:
              title: "{{ title }}"
              message: "{{ message }}"

  text_alert:
    alias: Text Alert Notification
    sequence:
      - service: >
          {% if who == 'simplemice' %}
            notify.simplemice
          {% else %}
            script.notify_telegram
          {% endif %}
        data:
          title: "{{ title }}"
          message: "{{ message }}"

  text_alert_image:
    alias: Text Notification with image
    sequence:
      - service: >
          {% if who == 'simplemice' %}
            notify.simplemice
          {% else %}
            script.notify_telegram
          {% endif %}
        data:
          title: "{{ title }}"
          message: "{{ message }}"
          data:
            attachment:
              url: "{{ url }}"
              content-type: "{{ content_type }}"
              hide-thumbnail: false

  ###############################################################################
  # Voice Notify
  ###############################################################################

  voice_notify:
    alias: TTS Voice Notification
    sequence:
      - condition: template
        value_template: "{{ states('input_boolean.audible_notifications') == 'on' }}"
      - service: media_player.volume_set
        entity_id: media_player.bedroom_speaker
        data:
          volume_level: 0.8
      - service: tts.amazon_polly_say
        entity_id: media_player.bedroom_speaker
        data:
          cache: true
          message: >
            {% set msg = "" %}
            {% macro getGreeting() %}
              {% if greeting | default('yes', true ) == "yes" %}
                {% if now().hour|int < 12 %}
                  Good morning.
                {% elif now().hour|int < 18 %}
                  Good afternoon.
                {% else %}
                  Good evening.
                {% endif %}
              {% endif %}
            {% endmacro %}
            {%- macro getEndGreeting() -%}
              {%- if greeting |default('yes', true ) == "yes" -%}
                Thank you!
              {%- endif -%}
            {%- endmacro -%}
            {% set msg = msg + "<speak> " %}
            {% set msg = msg + getGreeting() %}
            {% set msg = msg + ". " + message %}
            {% set msg = msg.replace(".", " <break time='0.5s'/> ") %}
            {% set msg = msg + " " + getEndGreeting() %}
            {% set msg = msg + " </speak>" %}
            {{ msg }}

  ###############################################################################
  # Greeting
  ###############################################################################
  voice_greeting:
    alias: Jarvis TTS Voice Greeting
    sequence:
      - service: tts.amazon_polly_say
        entity_id: media_player.bedroom_speaker
        data:
          cache: true
          message: >
            {% set msg = "" %}
            {% macro getGreeting() %}
              {% if greeting | default('yes', true ) == "yes" %}
                {% if now().hour|int < 12 %}
                  Good morning.
                {% elif now().hour|int < 18 %}
                  Good afternoon.
                {% else %}
                  Good evening.
                {% endif %}
              {% endif %}
            {% endmacro %}
            {% set msg = msg + "<speak> " %}
            {% set msg = msg + " " + getGreeting() %}
            {% set msg = msg.replace(".", " <break time='0.5s'/> ") %}
            {% set msg = msg + " </speak>" %}
            {{ msg }}

  ################################
  # local_audio is meant to be used to play audio in your media folder. (https://www.home-assistant.io/integrations/media_source/)
  #
  # Before using make sure you update as needed.
  #
  # To call this using in the action section of your automation:
  #
  # - service: script.local_audio
  #   data:
  #     speaker: main
  #     volume: .3
  #     media: /media/local_audio.mp3
  #
  local_audio:
    alias: Local Audio Notification
    sequence:
      # Ensure that audible notifications are allowed. Comment out if not needed.
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: "on"
      # Ensure the family is home. If you are using a group to track the family, or a person just update as needed. Comment out if not needed.
      - condition: state
        entity_id: sensor.family_home
        state: "on"
      # This sets the voume via a parameter when the script is called, and should be a value between .1 and 1.0
      - service: media_player.volume_set
        data:
          entity_id: >
            {% set who = speaker %}
             {% if who == 'kitchen' %}
               media_player.bedroom_speaker
             {% elif who == 'main' %}
               media_player.hbedroom_speaker
             {% else %}
               {% if states.input_boolean.audible_notifications.state == 'on' %}
               media_player.bedroom_speaker
               {% else %}
               media_player.bedroom_speaker
               {% endif %}
             {% endif %}
          volume_level: >
            {{ volume }}
      - delay: 00:00:05
      # This tells it to play the media and is set when the script is called.
      - service: media_player.play_media
        data:
          entity_id: >
            {% set who = speaker %}
            {% if who == 'kitchen' %}
              media_player.bedroom_speaker
            {% elif who == 'theater' %}
              media_player.bedroom_speaker
            {% elif who == 'main' %}
              media_player.bedroom_speaker
            {% else %}
              {% if states.input_boolean.audible_notifications.state == 'on' %}
              media_player.bedroom_speaker
              {% else %}
              media_player.bedroom_speaker
              {% endif %}
            {% endif %}
          media_content_type: "music"
          media_content_id: >
            {{ media }}

  ################################
  # youtube_audio is meant to be used to play audio from well youtube.
  # This scrtip requires the media_extractor integration.
  #
  # Before using make sure you update as needed.
  #
  # To call this using in the action section of your automation:
  #
  # - service: script.youtube_audio
  #   data:
  #     speaker: main
  #     volume: .5
  #     media: https://www.youtube.com/watch?v=pVeX4C9B1Lk
  #
  youtube_audio:
    alias: Youtube Voice Notification
    sequence:
      # Ensure that audible notifications are allowed. Comment out if not needed.
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: "on"
      # Ensure the family is home. If you are using a group to track the family, or a person just update as needed. Comment out if not needed.
      - condition: state
        entity_id: sensor.family_home
        state: "on"
      # This sets the voume via a parameter when the script is called, and should be a value between .1 and 1.0
      - service: media_player.volume_set
        data:
          entity_id: >
            {% set who = speaker %}
            {% if who == 'kitchen' %}
              media_player.bedroom_speaker
            {% elif who == 'theater' %}
              media_player.bedroom_speaker
            {% elif who == 'main' %}
              media_player.ha_blue
            {% else %}
              {% if states.input_boolean.audible_notifications.state == 'on' %}
              media_player.ha_blue
              {% else %}
              media_player.bedroom_speaker
              {% endif %}
            {% endif %}
          volume_level: >
            {{ volume }}
      # This tells it to play the media and is set when the script is called.
      #  media_content_type: video/Youtube
      - service: media_extractor.play_media
        data:
          entity_id: >
            {% set who = speaker %}
            {% if who == 'kitchen' %}
              media_player.bedroom_speaker
            {% elif who == 'main' %}
              media_player.bedroom_speaker
            {% else %}
              {% if states.input_boolean.audible_notifications.state == 'on' %}
              media_player.bedroom_speaker
              {% else %}
              media_player.bedroom_speaker
              {% endif %}
            {% endif %}
          media_content_type: music
          media_content_id: >
            {{ media }}
