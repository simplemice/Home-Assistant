###############################################################################
#   @author         :   Jeffrey Stone
#   @date           :   07/09/2019
#   @package        :   Jarvis
#   @description    :   Bringing some Jarvis to Home Assistant
###############################################################################

###############################################################################
# AWS Polly Options:
# pause:
#   <break time="3s"/>
# emphasis:
#   <emphasis level="strong">really like</emphasis>
#   level attribute values:
#     Strong: Increases the volume and slows the speaking rate so that the speech is louder and slower.
#     Moderate: Increases the volume and slows the speaking rate, but less than strong. Moderate is the default.
#     Reduced: Decreases the volume and speeds up the speaking rate. Speech is softer and faster.
# Pause Between Paragraphs:
#   Wrap text in
# Adding a Pause Between Sentences:
#   Ending a sentence with a period (.)
# Controlling How Special Types of Words Are Spoken:
#   <say-as interpret-as="value">[text to be interpreted]</say-as>
#   characters or spell-out: Spells out each letter of the text, as in a-b-c.
#   cardinal or number: Interprets the numerical text as a cardinal number, as in 1,234.
#   ordinal: Interprets the numerical text as an ordinal number, as in 1,234th.
#   digits: Spells out each digit individually, as in 1-2-3-4.
#   fraction: Interprets the numerical text as a fraction. This works for both common fractions such as 3/20, and mixed fractions, such as 2 Â½. See below for more information.
#   unit: Interprets a numerical text as a measurement. The value should be either a number or a fraction followed by a unit with no space in between as in 1/2inch, or by just a unit, as in 1meter.
#   date: Interprets the text as a date. The format of the date must be specified with the format attribute. See below for more information.
#   time: Interprets the numerical text as duration, in minutes and seconds, as in 1'21".
#   address: Interprets the text as part of a street address.
#   expletive: "Beeps out" the content included within the tag.
#   telephone: Interprets the numerical text as a 7-digit or 10-digit telephone number, as in 2025551212. You can also use this value for handle telephone extensions, as in 2025551212x345. See below for more information.
################################################################################

tts:
  - platform: google_translate
    cache: true
    cache_dir: /tmp/tts
    time_memory: 300
  - platform: amazon_polly
    aws_access_key_id: !secret poly_id
    aws_secret_access_key: !secret poly_key
    #    region_name: "us-east-1"
    text_type: ssml
    #    voice: Brian
    cache: True
    engine: neural

input_text:
  alexa_actionable_notification:
    name: Alexa Actionable Notification Holder
    max: 255
    initial: "{'text': 'This is a test of the alexa actions custom skill. Did it work?', 'event': 'amzn1.ask.skill.3302d350-d683-4e80-bbc6-1446201c1d24'}"

# Sensors used to Monitor Jarvis
mqtt:
  sensor:
    - name: "Jarvis Last Msg"
      state_topic: "house/polly/lastmsg"
    - name: "Jarvis Last Location"
      state_topic: "house/polly/lastloc"
    - name: "Jarvis Last Msg Time"
      state_topic: "house/polly/msgtime"

sensor:
  # Making some template sensors to simpify TTS Briefings and Announcements.
  - platform: template
    sensors:
      tts_greeting:
        friendly_name: TTS Greeting
        value_template: >
          {% if now().hour < 12 %}
          Good Morning.
          {% elif now().hour >= 12 and now().hour < 18 %}
          Good Afternoon.
          {% else %}
          Good Evening.
          {% endif %}
      tts_confirmation:
        friendly_name: TTS Confirmation
        value_template: >
          {{ [
            'Okay.', 
            'If you insist.',
            'I am afraid I can not do that,, I am kidding,',
            'Leave it to me.',
            'As you wish.',
            'I am on it.',
            'No Problem.',
            'Will do.',
            'I think I can handle that.',
            'Working on it now.',
            ', Oh, you were talking to me. Let me take care of that.'
            'Why not. It is not like I ever sleep.',
            'I am not even supposed to be here today. But whatever.',
            'You did not say the magic word. , Oh forget it. I will take care of it.',
            'Funny, I was just about to do that.',
            'There are still terabytes of calculations required before I can., Oh, whatever.'
            ] | random }}
      tts_interuption:
        friendly_name: TTS Interuption
        value_template: >
          {% if is_state('sensor.presence_source', 'simplemice') %}
            {{ [
                'Sir, ',
                'Pardon me Sir, ',
                'Pardon me Boss, ',
                'Boss, ',
                'I dont mean to interupt Boss, '
                ] | random }}
          {% else %}
            {{ [
              'Pardon me, ',
              'Excuse me, ',
              'I beg your pardon, ',
              'I do not mean to intrude, but, ',
              'I am sorry to interrupt, but. '
              ] | random }}
          {% endif %}
      tts_issue_announcement:
        friendly_name: TTS Issue Announcement
        value_template: >
          {{ [
            'Mice House Emergency Alert!',
            'Mice House, We have a problem!',
            'You might not like this.',
            'There is something that needs your attention.'
            ] | random }}

script:
  speech_engine:
    alias: Main Speech Engine
    sequence:
      - service: mqtt.publish
        data_template:
          topic: house/polly/lastmsg
          payload: >
            {%- macro getReport() -%}
              {% if msg_summary %}
                {{ msg_summary}}
              {% else %}
                {{ message | striptags | truncate(220)}}
              {% endif %}
              {%- endmacro -%}
              {%- macro cleanup(data) -%}
                {%- for item in data.split("\n")  if item | trim != "" -%}
                  {{ item | trim }} {% endfor -%}
              {%- endmacro -%}
              {%- macro mother_of_all_macros() -%}
                {{ getReport() }}
              {%- endmacro -%}
              {{- cleanup(mother_of_all_macros()) -}}
          retain: true
      - service: mqtt.publish
        data_template:
          topic: house/polly/msgtime
          payload:
            '{{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")
            }} '
          retain: true
      - service: mqtt.publish
        data_template:
          topic: house/polly/lastloc
          payload: "{{ who }}"
          retain: true
      - condition: state
        entity_id: input_boolean.audible_notifications
        state: "on"
      - condition: state
        entity_id: sensor.family_home
        state: "on"
      - condition: state
        entity_id: input_boolean.vacation_mode
        state: "off"
      - service: >
          {% if who in ['kitchen', 'media_player.bedroom_speaker'] %} 
            {% set who = 'livingroom' %}
          {% elif who in ['livingroom','media_player.bedroom_speaker','livingroom','main']  %} 
            {% set who = 'livingroom' %}
          {% else %}
            {% set who = 'main' %}
          {% endif %} 
          script.jarvis_voice
        data:
          who: "{{ who }}"
          message: >
            {%- macro getReport() -%}
                {{ message }}
            {%- endmacro -%}
            {%- macro cleanup(data) -%}
              {%- for item in data.split("\n")  if item | trim != "" -%}
                {{ item | trim }} {% endfor -%}
            {%- endmacro -%}
            {%- macro mother_of_all_macros() -%}
              {{ getReport() }}
            {%- endmacro -%}
            {{- cleanup(mother_of_all_macros()) -}}

  jarvis_voice:
    alias: Speech Engine Jarvis Voice
    sequence:
      - if:
          - condition: template
            value_template: "{{ who in ['livingroom', 'media_player.bedroom_speaker','livingroom'] }}"
        then:
          - service: media_player.volume_set
            data:
              entity_id: >
                {% if who in ['livingroom']%} 
                  media_player.bedroom_speaker
                {% else %}
                  media_player.bedroom_speaker
                {% endif %}
              volume_level: "{{ states('input_number.tts_high_volume') | float }}"
          - service: tts.amazon_polly_say
            data_template:
              entity_id: >
                {% if who in ['livingroom']%}
                  media_player.bedroom_speaker
                {% else %}
                  media_player.bedroom_speaker
                {% endif %}
              message: >
                <speak>
                  <break time="1s"/>
                  <prosody rate="fast">
                  {{ message }}
                  </prosody>
                </speak>
          - delay:
              seconds: 20
          - service: media_player.volume_set
            data:
              entity_id: >
                {% if who in ['livingroom']%} 
                  media_player.bedroom_speaker
                {% else %}
                  media_player.bedroom_speaker
                {% endif %}
              volume_level: "{{ states('input_number.tts_volume') | float }}"
        else:
          - service: media_player.volume_set
            data:
              entity_id: >
                {% if who in ['livingroom','media_player.bedroom_speaker','livingroom']%} 
                  media_player.bedroom_speaker
                {% else %}
                  media_player.bedroom_speaker
                {% endif %}
              volume_level: "{{ states('input_number.tts_volume') | float }}"
          - service: notify.alexa_media
            data:
              message: >
                <voice name="{{ states('input_select.polly_voice') }}">
                <amazon:auto-breaths>
                <prosody rate="fast">
                {{ message }}
                </prosody>
                </amazon:auto-breaths>
                </voice>
              target: >
                {% if who in ['livingroom','media_player.bedroom_speaker','livingroom']%} 
                  media_player.bedroom_speaker
                {% else %}
                  media_player.bedroom_speaker
                {% endif %}
              data:
                type: tts
  jarvis_alert:
    alias: Jarvis Alert Speech
    sequence:
      - service: mqtt.publish
        data_template:
          topic: house/polly/lastmsg
          payload: >
            {%- macro getReport() -%}
            {% if msg_summary %}
              {{ msg_summary}}
            {% else %}
              {{ message | striptags | truncate(220)}}
            {% endif %}
            {%- endmacro -%}
            {%- macro cleanup(data) -%}
              {%- for item in data.split("\n")  if item | trim != "" -%}
                {{ item | trim }} {% endfor -%}
            {%- endmacro -%}
            {%- macro mother_of_all_macros() -%}
              {{ getReport() }}
            {%- endmacro -%}
            {{- cleanup(mother_of_all_macros()) -}}
          retain: true
      - service: mqtt.publish
        data_template:
          topic: house/polly/msgtime
          payload: >
            {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p")}}
          retain: true
      - service: mqtt.publish
        data_template:
          topic: house/polly/lastloc
          payload: "{{ who }}"
          retain: true
      - service: media_player.volume_set
        data_template:
          entity_id: media_player.bedroom_speaker
          volume_level: >
            {% if is_state('binary_sensor.lights_out', 'on') %}
              {{ states('input_number.tts_high_volume') | float }}
            {% else %}
              {{ states('input_number.tts_volume') | float }}
            {% endif %}
      - service: tts.amazon_polly_say
        data_template:
          entity_id: media_player.bedroom_speaker
          message: >
            <speak>
              <break time="1s"/>
              <amazon:auto-breaths>
              <prosody rate="fast">
              {{ message }}
              <prosody>
              </amazon:auto-breaths>
            </speak>
          cache: true
  announcement:
    alias: Announcement Speech Voice
    sequence:
      - service: script.speech_engine
        data:
          who: >
            {% if who %}
              {{ who }}
            {% else %}
              {{ states('sensor.room_audio') }}
            {% endif %}
          message: >
            {% if states('sensor.mice_room') == who %}
              {{ 
                ['Pardon me everyone, ',
                'Excuse me, ',
                'I beg your pardon, ',
                'Since I have you all together, ',
                'I am sorry to interrupt, but. ',
                'While I have you all together,'] 
                | random }}
            {% elif states('sensor.mice_room') == who  %}
              {{ 
                ['Sir, ',
                'Pardon me Sir, ',
                'Pardon me Jeff, ',
                'Boss, ',
                'I dont mean to interrupt Sir, '
                ] | random }}
            {% else %}
              {{ 
               ['Pardon me, ',
                'Excuse me, ',
                'I beg your pardon, ',
                'I do not mean to intrude, but, ',
                'I am sorry to interrupt, but. '
                ] | random }}
            {% endif %} 
            {{ message }}"
  briefing:
    alias: Briefing Speech Engine
    sequence:
      - service: script.speech_engine
        data:
          who: "{{ who }}"
          message: >-
            {% if now().strftime('%H')|int < 12%}
             Good morning.
            {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %}
              Good afternoon.
            {% else %}
              Good evening.
            {% endif %}
            {% if states('sensor.mice_room') == who %}
              everyone.
            {% elif states('sensor.mice_room') == who  %}
              Sir.
            {% else %}
              Hm.
            {% endif %}
            {{ message }}
  jarvis_already_done:
    alias: Jarvis Already Done Voice
    sequence:
      - service: script.speech_engine
        data:
          who: "{{ states('sensor.room_audio') }}"
          message: >-
            {{ [
            'I have already handled that.', 
            'Looks like someone already did that, but I will gladly take credit.',
            'I am so fast it is already done.'
            ]| random }}
  jarvis_response:
    alias: Jarvis Response Voice
    sequence:
      - service: script.speech_engine
        data:
          who: "{{ states('sensor.room_audio') }}"
          message: >-
            {{ [
            'Okay.', 
            'If you insist.',
            'I am afraid I can not do that, I am kidding,',
            'Leave it to me.',
            'As you wish.',
            'I am on it.',
            'No Problem.',
            'I think I can handle that.',
            'Working on it now.',
            '.Oh, you were talking to me. Let me take care of that.'
            'Why not. It is not like I ever sleep.',
            'I am not even supposed to be here today. But whatever.',
            'You did not say the magic word.  ,Oh forget it. I will take care of it.',
            'Funny, I was just about to do that.',
            'There are still terabytes of calculations required before I can. ,Oh, whatever.'
            ] | random }}

  alexa_interjection:
    sequence:
      - service: script.status_annc
        data:
          who: "{{ states('sensor.last_alexa')}}"
          call_confirmation: 1

  jarvis_said_what:
    alias: Repite Last Jarvis Message
    sequence:
      - service: script.speech_engine
        data:
          who: "{{ states('sensor.room_audio') }}"
          message: >
            {{ states('sensor.lastmsg') }}

  activate_alexa_actionable_notification:
    sequence:
      - service: input_text.set_value
        data:
          entity_id: input_text.alexa_actionable_notification
          value: '{"text": "{{ text }}", "event": "{{ event_id }}"}'
      - service: media_player.play_media
        data:
          entity_id: "{{ alexa_device }}"
          media_content_type: skill
          media_content_id: amzn1.ask.skill.3302d350-d683-4e80-bbc6-1446201c1d24
